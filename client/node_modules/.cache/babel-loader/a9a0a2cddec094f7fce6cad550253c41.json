{"ast":null,"code":"var _jsxFileName = \"/Users/gastonfernandez/workspace/falling-letters/src/components/Game.js\";\nimport React from 'react';\nconst letterList = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"];\n\nclass Game extends React.Component {\n  constructor() {\n    super();\n\n    this.componentDidMount = () => {\n      document.addEventListener(\"keydown\", this.handleKeyPress);\n      this.mainLoop();\n    };\n\n    this.mainLoop = () => {\n      let _this$state = this.state,\n          score = _this$state.score,\n          gameSpeed = _this$state.gameSpeed,\n          letters = _this$state.letters,\n          lettersGenerated = _this$state.lettersGenerated,\n          pressedLetters = _this$state.pressedLetters,\n          speedIncrement = _this$state.speedIncrement,\n          fallingSpeed = _this$state.fallingSpeed,\n          gameOver = _this$state.gameOver;\n\n      if (!gameOver) {\n        //Increment speeds\n        if (lettersGenerated % 10 === 0) {\n          speedIncrement += 0.0001;\n        }\n\n        if (lettersGenerated % 5 === 0) {\n          fallingSpeed += 0.01;\n        }\n\n        gameSpeed += speedIncrement;\n\n        if (gameSpeed > 2) {\n          gameSpeed = 1;\n        }\n\n        const countBefore = letters.length; //Check if pressed letters are in the screen and remove them\n\n        if (pressedLetters.length > 0) {\n          letters.forEach(l => {\n            let i = pressedLetters.indexOf(l.letter);\n\n            if (i !== -1) {\n              letters.splice(i, 1);\n            }\n          });\n\n          if (countBefore === letters.length) {\n            score--;\n          } else {\n            score += countBefore - letters.length;\n          }\n\n          pressedLetters = [];\n        } //Add new letter to the screen\n\n\n        if (gameSpeed === 1) {\n          lettersGenerated++;\n          const randomLetter = this.getRandomeLetter();\n          letters.push({\n            letter: randomLetter,\n            key: lettersGenerated,\n            position: {\n              x: this.getRandom(10, window.innerWidth - 30),\n              y: 20\n            }\n          });\n        } //Update letters position and check gameover\n\n\n        letters.forEach(letter => {\n          letter.position.y += fallingSpeed;\n\n          if (letter.position.y >= window.innerHeight - 110) {\n            gameOver = true;\n          }\n        });\n        const loop = requestAnimationFrame(this.mainLoop);\n        this.setState({\n          letters,\n          score,\n          speedIncrement,\n          lettersGenerated,\n          gameSpeed,\n          loop,\n          fallingSpeed,\n          pressedLetters,\n          gameOver\n        });\n      } else {\n        this.stopGame();\n        this.props.history.push({\n          pathname: '/gameOver',\n          state: {\n            score: this.state.score\n          }\n        });\n      }\n    };\n\n    this.shakeScreen = () => {\n      const _this$state2 = this.state,\n            letters = _this$state2.letters,\n            pressedLetters = _this$state2.pressedLetters,\n            score = _this$state2.score;\n      const countBefore = letters.length; //Check if pressed letters are in the screen and remove them\n\n      console.log(\"letters B\", letters);\n      console.log(\"pressedLetters B\", pressedLetters);\n      console.log(\"score B\", score);\n\n      if (pressedLetters.length > 0) {\n        letters.forEach(l => {\n          let i = pressedLetters.indexOf(l.letter);\n\n          if (i !== -1) {\n            letters.splice(i, 1);\n          }\n        });\n\n        if (countBefore === letters.length) {\n          score--;\n        } else {\n          score += countBefore - letters.length;\n        }\n      }\n\n      console.log(\"letters A\", letters);\n      console.log(\"pressedLetters A\", pressedLetters);\n      console.log(\"score A\", score);\n    };\n\n    this.handleKeyPress = e => {\n      let pressedLetters = this.state.pressedLetters;\n      pressedLetters.push(e.key.toUpperCase());\n      this.setState({\n        pressedLetters\n      });\n    };\n\n    this.getRandomeLetter = () => {\n      const randomIndex = Math.floor(Math.random() * letterList.length);\n      return letterList[randomIndex];\n    };\n\n    this.getRandom = (min, max) => {\n      return Math.random() * (max - min) + min;\n    };\n\n    this.stopGame = () => {\n      cancelAnimationFrame(this.state.loop);\n    };\n\n    this.startGame = () => {\n      const loop = requestAnimationFrame(this.mainLoop);\n      this.setState({\n        loop\n      });\n    };\n\n    this.drawLetter = letter => {\n      return React.createElement(\"span\", {\n        className: \"letter\",\n        key: letter.key,\n        style: {\n          position: \"absolute\",\n          left: letter.position.x,\n          top: letter.position.y\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, letter.letter);\n    };\n\n    this.state = {\n      score: 0,\n      gameSpeed: 1,\n      speedIncrement: 0.01,\n      fallingSpeed: 0.1,\n      loop: undefined,\n      letters: [],\n      pressedLetters: [],\n      lettersGenerated: 0\n    };\n  }\n\n  render() {\n    const letters = this.state.letters;\n    const gameOverLine = {\n      position: \"absolute\",\n      width: \"100%\",\n      borderTop: \"3px solid black\",\n      top: window.innerHeight - 100\n    };\n    return React.createElement(\"div\", {\n      className: \"game\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, \"Score: \", this.state.score), React.createElement(\"button\", {\n      onClick: this.stopGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, \"STOP\"), React.createElement(\"button\", {\n      onClick: this.startGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, \"START\"), letters && letters.map(letter => this.drawLetter(letter)), React.createElement(\"div\", {\n      style: gameOverLine,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, \"GAME OVER\"), React.createElement(\"button\", {\n      onClick: this.shakeScreen,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, \"TEST\"));\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/Users/gastonfernandez/workspace/falling-letters/src/components/Game.js"],"names":["React","letterList","Game","Component","constructor","componentDidMount","document","addEventListener","handleKeyPress","mainLoop","state","score","gameSpeed","letters","lettersGenerated","pressedLetters","speedIncrement","fallingSpeed","gameOver","countBefore","length","forEach","l","i","indexOf","letter","splice","randomLetter","getRandomeLetter","push","key","position","x","getRandom","window","innerWidth","y","innerHeight","loop","requestAnimationFrame","setState","stopGame","props","history","pathname","shakeScreen","console","log","e","toUpperCase","randomIndex","Math","floor","random","min","max","cancelAnimationFrame","startGame","drawLetter","left","top","undefined","render","gameOverLine","width","borderTop","map"],"mappings":"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","sourcesContent":["import React from 'react';\n\n\nconst letterList = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \n                    \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \n                    \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \n                    \"S\", \"T\", \"U\", \"V\", \"W\", \n                    \"X\", \"Y\", \"Z\"]\n\n\nclass Game extends React.Component{\n   \n    constructor(){\n        super()\n        this.state = {\n            score: 0,\n            gameSpeed: 1,\n            speedIncrement: 0.01,\n            fallingSpeed: 0.1,\n            loop: undefined,\n            letters: [],\n            pressedLetters: [],\n            lettersGenerated: 0\n        }\n    }\n\n    componentDidMount = () => {\n        document.addEventListener(\"keydown\", this.handleKeyPress)\n        this.mainLoop()\n    }\n\n    mainLoop = () => {\n        let {score, gameSpeed, letters, \n            lettersGenerated, pressedLetters,\n            speedIncrement, fallingSpeed, gameOver} = this.state\n        \n        if(!gameOver) {\n            \n            //Increment speeds\n            if(lettersGenerated % 10 === 0){\n                speedIncrement += 0.0001\n            }\n    \n            if(lettersGenerated % 5 === 0){\n                fallingSpeed += 0.01\n            }\n    \n            gameSpeed += speedIncrement\n            if(gameSpeed > 2){\n                gameSpeed = 1\n            }\n    \n            const countBefore = letters.length\n            //Check if pressed letters are in the screen and remove them\n            if(pressedLetters.length > 0){\n\n                letters.forEach(l => {\n                    let i = pressedLetters.indexOf(l.letter)\n                    if(i !== -1){\n                        letters.splice(i, 1)\n                    }\n                })\n\n                if(countBefore === letters.length){\n                    score--\n                }else{\n                    score += countBefore - letters.length\n                }\n    \n                pressedLetters = []\n            }\n    \n            //Add new letter to the screen\n            if(gameSpeed === 1){\n                lettersGenerated++\n    \n                const randomLetter = this.getRandomeLetter()\n                letters.push({\n                    letter: randomLetter,\n                    key: lettersGenerated,\n                    position: {\n                        x: this.getRandom(10, window.innerWidth-30),\n                        y: 20,\n                    }\n                })\n            }\n            \n            //Update letters position and check gameover\n            letters.forEach(letter => {\n                letter.position.y += fallingSpeed\n                if(letter.position.y >= (window.innerHeight-110)){\n                    gameOver = true\n                }\n            })\n    \n            const loop = requestAnimationFrame(this.mainLoop);\n            this.setState({\n                letters,\n                score, \n                speedIncrement, \n                lettersGenerated, \n                gameSpeed, \n                loop,\n                fallingSpeed, \n                pressedLetters, \n                gameOver\n            })\n        }else{\n            this.stopGame()\n            this.props.history.push({pathname: '/gameOver', state:{score: this.state.score}})\n        }        \n    }\n\n    shakeScreen = () => {\n        const {letters, pressedLetters, score} = this.state\n        const countBefore = letters.length\n        //Check if pressed letters are in the screen and remove them\n        console.log(\"letters B\", letters)\n        console.log(\"pressedLetters B\", pressedLetters)\n        console.log(\"score B\", score)\n        if(pressedLetters.length > 0){\n\n            letters.forEach(l => {\n                let i = pressedLetters.indexOf(l.letter)\n                if(i !== -1){\n                    letters.splice(i, 1)\n                }\n            })\n\n            if(countBefore === letters.length){\n                score--\n            }else{\n                score += countBefore - letters.length\n            }\n        }\n\n        console.log(\"letters A\", letters)\n        console.log(\"pressedLetters A\", pressedLetters)\n        console.log(\"score A\", score)\n    }\n\n    handleKeyPress = (e) => {\n        let pressedLetters = this.state.pressedLetters\n        pressedLetters.push(e.key.toUpperCase())\n        this.setState({pressedLetters})\n    }\n\n    getRandomeLetter = () => {\n        const randomIndex = Math.floor((Math.random() * letterList.length));\n        return letterList[randomIndex]\n    }\n\n    getRandom = (min, max) => {\n        return Math.random() * (max - min) + min;\n    }\n\n    stopGame = () => {\n        cancelAnimationFrame(this.state.loop)\n    }\n\n    startGame = () => {\n        const loop = requestAnimationFrame(this.mainLoop);\n        this.setState({loop})\n    }\n\n    drawLetter = (letter) => {\n        return (\n            <span className=\"letter\" key={letter.key} style={\n                {\n                    position: \"absolute\", \n                    left: letter.position.x,\n                    top: letter.position.y\n                }\n            }>{letter.letter}</span>\n        )\n    }\n\n    render(){\n        const letters = this.state.letters\n        const gameOverLine = {\n            position: \"absolute\", \n            width: \"100%\",\n            borderTop: \"3px solid black\",\n            top: (window.innerHeight-100)\n        }\n\n        return(\n            <div className=\"game\">\n                <h1>Score: {this.state.score}</h1>\n                <button onClick={this.stopGame}>STOP</button>\n                <button onClick={this.startGame}>START</button>\n                {letters && letters.map(letter => this.drawLetter(letter))}\n                <div style={gameOverLine}>GAME OVER</div>\n                <button onClick={this.shakeScreen}>TEST</button>\n            </div>\n        )\n    }\n}\n\nexport default Game"]},"metadata":{},"sourceType":"module"}