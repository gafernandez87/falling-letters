{"ast":null,"code":"var _jsxFileName = \"/Users/gastonfernandez/workspace/falling-letters/src/components/Game.js\";\nimport React from 'react';\nconst letterList = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"];\n\nclass Game extends React.Component {\n  constructor() {\n    super();\n\n    this.componentDidMount = () => {\n      document.addEventListener(\"keydown\", this.handleKeyPress);\n      this.mainLoop();\n    };\n\n    this.mainLoop = () => {\n      let _this$state = this.state,\n          score = _this$state.score,\n          gameSpeed = _this$state.gameSpeed,\n          letters = _this$state.letters,\n          lettersGenerated = _this$state.lettersGenerated,\n          pressedLetters = _this$state.pressedLetters,\n          speedIncrement = _this$state.speedIncrement,\n          fallingSpeed = _this$state.fallingSpeed,\n          gameOver = _this$state.gameOver;\n\n      if (!gameOver) {\n        //Increment speeds\n        if (lettersGenerated % 10 === 0) {\n          speedIncrement += 0.0001;\n        }\n\n        if (lettersGenerated % 5 === 0) {\n          fallingSpeed += 0.01;\n        }\n\n        gameSpeed += speedIncrement;\n\n        if (gameSpeed > 2) {\n          gameSpeed = 1;\n        }\n\n        const countBefore = letters.length; //Check if pressed letters are in the screen and remove them\n\n        if (pressedLetters) {\n          letters.forEach(l => {\n            console.log(\"pressedLetters \".concat(pressedLetters, \" letter \").concat(l.letter));\n            let i = pressedLetters.indexOf(l.letter);\n\n            if (i === -1) {\n              score--;\n            } else {\n              letters.splice(i, 1);\n            }\n          });\n          score += countBefore - letters.length;\n          pressedLetters = [];\n        } //Add new letter to the screen\n\n\n        if (gameSpeed === 1) {\n          lettersGenerated++;\n          const randomLetter = this.getRandomeLetter();\n          letters.push({\n            letter: randomLetter,\n            key: lettersGenerated,\n            position: {\n              x: this.getRandom(0, window.innerWidth),\n              y: 20\n            }\n          });\n        } //Update letters position and check gameover\n\n\n        letters.forEach(letter => {\n          letter.position.y += fallingSpeed;\n\n          if (letter.position.y >= 850) {\n            gameOver = true;\n          }\n        });\n        const loop = requestAnimationFrame(this.mainLoop);\n        this.setState({\n          letters,\n          score,\n          speedIncrement,\n          lettersGenerated,\n          gameSpeed,\n          loop,\n          fallingSpeed,\n          pressedLetters,\n          gameOver\n        });\n      } else {\n        this.stopGame();\n        this.props.history.push({\n          pathname: '/gameOver',\n          state: {\n            score: this.state.score\n          }\n        });\n      }\n    };\n\n    this.handleKeyPress = e => {\n      let pressedLetters = this.state.pressedLetters;\n      pressedLetters.push(e.key.toUpperCase());\n      this.setState({\n        pressedLetters\n      });\n    };\n\n    this.getRandomeLetter = () => {\n      const randomIndex = Math.floor(Math.random() * letterList.length + 1);\n      return letterList[randomIndex];\n    };\n\n    this.getRandom = (min, max) => {\n      return Math.random() * (max - min) + min;\n    };\n\n    this.stopGame = () => {\n      cancelAnimationFrame(this.state.loop);\n    };\n\n    this.startGame = () => {\n      const loop = requestAnimationFrame(this.mainLoop);\n      this.setState({\n        loop\n      });\n    };\n\n    this.drawLetter = letter => {\n      return React.createElement(\"span\", {\n        className: \"letter\",\n        key: letter.key,\n        style: {\n          position: \"absolute\",\n          left: letter.position.x,\n          top: letter.position.y\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, letter.letter);\n    };\n\n    this.state = {\n      score: 0,\n      gameSpeed: 1,\n      speedIncrement: 0.01,\n      fallingSpeed: 0.1,\n      loop: undefined,\n      letters: [],\n      pressedLetters: [],\n      lettersGenerated: 0\n    };\n  }\n\n  render() {\n    const letters = this.state.letters;\n    return React.createElement(\"div\", {\n      className: \"game\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, \"Score: \", this.state.score), React.createElement(\"button\", {\n      onClick: this.stopGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, \"STOP\"), React.createElement(\"button\", {\n      onClick: this.startGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, \"START\"), letters && letters.map(letter => this.drawLetter(letter)));\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/Users/gastonfernandez/workspace/falling-letters/src/components/Game.js"],"names":["React","letterList","Game","Component","constructor","componentDidMount","document","addEventListener","handleKeyPress","mainLoop","state","score","gameSpeed","letters","lettersGenerated","pressedLetters","speedIncrement","fallingSpeed","gameOver","countBefore","length","forEach","l","console","log","letter","i","indexOf","splice","randomLetter","getRandomeLetter","push","key","position","x","getRandom","window","innerWidth","y","loop","requestAnimationFrame","setState","stopGame","props","history","pathname","e","toUpperCase","randomIndex","Math","floor","random","min","max","cancelAnimationFrame","startGame","drawLetter","left","top","undefined","render","map"],"mappings":"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","sourcesContent":["import React from 'react';\n\n\nconst letterList = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \n                    \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \n                    \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \n                    \"S\", \"T\", \"U\", \"V\", \"W\", \n                    \"X\", \"Y\", \"Z\"]\n\n\nclass Game extends React.Component{\n   \n    constructor(){\n        super()\n        this.state = {\n            score: 0,\n            gameSpeed: 1,\n            speedIncrement: 0.01,\n            fallingSpeed: 0.1,\n            loop: undefined,\n            letters: [],\n            pressedLetters: [],\n            lettersGenerated: 0\n        }\n    }\n\n    componentDidMount = () => {\n        document.addEventListener(\"keydown\", this.handleKeyPress)\n        this.mainLoop()\n    }\n\n    mainLoop = () => {\n        let {score, gameSpeed, letters, \n            lettersGenerated, pressedLetters,\n            speedIncrement, fallingSpeed, gameOver} = this.state\n        \n        if(!gameOver) {\n            \n            //Increment speeds\n            if(lettersGenerated % 10 === 0){\n                speedIncrement += 0.0001\n            }\n    \n            if(lettersGenerated % 5 === 0){\n                fallingSpeed += 0.01\n            }\n    \n            gameSpeed += speedIncrement\n            if(gameSpeed > 2){\n                gameSpeed = 1\n            }\n    \n            const countBefore = letters.length\n            //Check if pressed letters are in the screen and remove them\n            if(pressedLetters){\n\n                letters.forEach(l => {\n                    console.log(`pressedLetters ${pressedLetters} letter ${l.letter}`)\n                    let i = pressedLetters.indexOf(l.letter)\n                    if(i === -1){\n                        score--\n                    }else{\n                        letters.splice(i, 1)\n                    }\n                })\n\n                score += countBefore - letters.length\n    \n                pressedLetters = []\n            }\n    \n            //Add new letter to the screen\n            if(gameSpeed === 1){\n                lettersGenerated++\n    \n                const randomLetter = this.getRandomeLetter()\n                letters.push({\n                    letter: randomLetter,\n                    key: lettersGenerated,\n                    position: {\n                        x: this.getRandom(0, window.innerWidth),\n                        y: 20,\n                    }\n                })\n            }\n            \n            //Update letters position and check gameover\n            letters.forEach(letter => {\n                letter.position.y += fallingSpeed\n                if(letter.position.y >= 850){\n                    gameOver = true\n                }\n            })\n    \n            const loop = requestAnimationFrame(this.mainLoop);\n            this.setState({\n                letters,\n                score, \n                speedIncrement, \n                lettersGenerated, \n                gameSpeed, \n                loop,\n                fallingSpeed, \n                pressedLetters, \n                gameOver\n            })\n        }else{\n            this.stopGame()\n            this.props.history.push({pathname: '/gameOver', state:{score: this.state.score}})\n        }\n\n        \n    }\n\n    handleKeyPress = (e) => {\n        let pressedLetters = this.state.pressedLetters\n        pressedLetters.push(e.key.toUpperCase())\n        this.setState({pressedLetters})\n    }\n\n    getRandomeLetter = () => {\n        const randomIndex = Math.floor((Math.random() * letterList.length) + 1);\n        return letterList[randomIndex]\n    }\n\n    getRandom = (min, max) => {\n        return Math.random() * (max - min) + min;\n    }\n\n    stopGame = () => {\n        cancelAnimationFrame(this.state.loop)\n    }\n\n    startGame = () => {\n        const loop = requestAnimationFrame(this.mainLoop);\n        this.setState({loop})\n    }\n\n    drawLetter = (letter) => {\n        return (\n            <span className=\"letter\" key={letter.key} style={\n                {\n                    position: \"absolute\", \n                    left: letter.position.x,\n                    top: letter.position.y\n                }\n            }>{letter.letter}</span>\n        )\n    }\n\n    render(){\n        const letters = this.state.letters\n        return(\n            <div className=\"game\">\n                <h1>Score: {this.state.score}</h1>\n                <button onClick={this.stopGame}>STOP</button>\n                <button onClick={this.startGame}>START</button>\n                {letters && letters.map(letter => this.drawLetter(letter))}\n            </div>\n        )\n    }\n}\n\nexport default Game"]},"metadata":{},"sourceType":"module"}