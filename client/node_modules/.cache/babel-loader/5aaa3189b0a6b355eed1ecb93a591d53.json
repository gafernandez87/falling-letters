{"ast":null,"code":"var _jsxFileName = \"/Users/gastonfernandez/workspace/falling-letters/src/components/Game.js\";\nimport React from 'react';\nimport explosion from '../assets/explode.gif';\nconst letterList = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"];\n\nclass Game extends React.Component {\n  constructor() {\n    super();\n\n    this.componentDidMount = () => {\n      document.addEventListener(\"keydown\", this.handleKeyPress);\n      this.mainLoop();\n    };\n\n    this.mainLoop = () => {\n      let _this$state = this.state,\n          score = _this$state.score,\n          gameSpeed = _this$state.gameSpeed,\n          letters = _this$state.letters,\n          lettersGenerated = _this$state.lettersGenerated,\n          pressedLetters = _this$state.pressedLetters,\n          speedIncrement = _this$state.speedIncrement,\n          fallingSpeed = _this$state.fallingSpeed,\n          gameOver = _this$state.gameOver;\n\n      if (!gameOver) {\n        //Increment speeds\n        if (lettersGenerated % 10 === 0) {\n          speedIncrement += 0.0001;\n        }\n\n        if (lettersGenerated % 5 === 0) {\n          fallingSpeed += 0.01;\n        }\n\n        gameSpeed += speedIncrement;\n\n        if (gameSpeed > 2) {\n          gameSpeed = 1;\n        }\n\n        let newLetters = letters; //Check if pressed letters are in the screen and remove them\n\n        if (pressedLetters.length > 0) {\n          newLetters = letters.filter(l => {\n            return pressedLetters.indexOf(l.letter) === -1;\n          });\n          letters.forEach(l => {\n            if (pressedLetters.indexOf(l.letter) >= 0) {\n              this.showExplosion(l);\n            }\n          });\n\n          if (letters.length === newLetters.length) {\n            score--;\n            this.shakeScreen();\n          } else {\n            score += letters.length - newLetters.length;\n          }\n\n          pressedLetters = [];\n        } //Add new letter to the screen\n\n\n        if (gameSpeed === 1) {\n          lettersGenerated++;\n          let randomLetter = this.getRandomeLetter();\n          newLetters.push({\n            letter: randomLetter,\n            key: lettersGenerated,\n            position: {\n              x: this.getRandom(10, window.innerWidth - 30),\n              y: 20\n            }\n          });\n\n          if (score >= 10) {\n            const r = this.getRandom(1, 6);\n\n            if (r === 2) {\n              lettersGenerated++;\n              randomLetter = this.getRandomeLetter();\n              newLetters.push({\n                letter: randomLetter,\n                key: lettersGenerated,\n                position: {\n                  x: this.getRandom(10, window.innerWidth - 30),\n                  y: 20\n                }\n              });\n            }\n          }\n        } //Update letters position and check gameover\n\n\n        newLetters.forEach(letter => {\n          letter.position.y += fallingSpeed;\n\n          if (letter.position.y >= window.innerHeight - 110) {\n            gameOver = true;\n          }\n        });\n        const loop = requestAnimationFrame(this.mainLoop);\n        this.setState({\n          letters: newLetters,\n          score,\n          speedIncrement,\n          lettersGenerated,\n          gameSpeed,\n          loop,\n          fallingSpeed,\n          pressedLetters,\n          gameOver\n        });\n      } else {\n        this.stopGame();\n        this.props.history.push({\n          pathname: '/gameOver',\n          state: {\n            score: this.state.score\n          }\n        });\n      }\n    };\n\n    this.shakeScreen = () => {\n      this.setState({\n        showMiss: \"inline\"\n      });\n      setTimeout(() => {\n        this.setState({\n          showMiss: \"none\"\n        });\n      }, 100);\n    };\n\n    this.handleKeyPress = e => {\n      let pressedLetters = this.state.pressedLetters;\n      pressedLetters.push(e.key.toUpperCase());\n      this.setState({\n        pressedLetters\n      });\n    };\n\n    this.getRandomeLetter = () => {\n      const randomIndex = Math.floor(Math.random() * letterList.length);\n      return letterList[randomIndex];\n    };\n\n    this.getRandom = (min, max) => {\n      return Math.floor(Math.random() * (max - min) + min);\n    };\n\n    this.stopGame = () => {\n      cancelAnimationFrame(this.state.loop);\n    };\n\n    this.startGame = () => {\n      const loop = requestAnimationFrame(this.mainLoop);\n      this.setState({\n        loop\n      });\n    };\n\n    this.drawLetter = letter => {\n      return React.createElement(\"span\", {\n        className: \"letter\",\n        key: letter.key,\n        style: {\n          position: \"absolute\",\n          left: letter.position.x,\n          top: letter.position.y\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, letter.letter);\n    };\n\n    this.showExplosion = letter => {\n      return React.createElement(\"img\", {\n        src: explosion,\n        style: {\n          position: \"absolute\",\n          left: letter.position.x,\n          top: letter.position.y,\n          width: 30\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      });\n    };\n\n    this.state = {\n      score: 0,\n      gameSpeed: 1,\n      speedIncrement: 0.01,\n      fallingSpeed: 0.1,\n      loop: undefined,\n      letters: [],\n      pressedLetters: [],\n      lettersGenerated: 0,\n      showMiss: \"none\"\n    };\n  }\n\n  render() {\n    const letters = this.state.letters;\n    const showMiss = this.state.showMiss;\n    return React.createElement(\"div\", {\n      className: \"game\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      class: \"miss\",\n      style: {\n        display: showMiss\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      className: \"score\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, \"Score \", this.state.score), letters && letters.map(letter => this.drawLetter(letter)), React.createElement(\"div\", {\n      className: \"gameOverSection\",\n      style: {\n        top: window.innerHeight - 100\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, \"GAME OVER\"));\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/Users/gastonfernandez/workspace/falling-letters/src/components/Game.js"],"names":["React","explosion","letterList","Game","Component","constructor","componentDidMount","document","addEventListener","handleKeyPress","mainLoop","state","score","gameSpeed","letters","lettersGenerated","pressedLetters","speedIncrement","fallingSpeed","gameOver","newLetters","length","filter","l","indexOf","letter","forEach","showExplosion","shakeScreen","randomLetter","getRandomeLetter","push","key","position","x","getRandom","window","innerWidth","y","r","innerHeight","loop","requestAnimationFrame","setState","stopGame","props","history","pathname","showMiss","setTimeout","e","toUpperCase","randomIndex","Math","floor","random","min","max","cancelAnimationFrame","startGame","drawLetter","left","top","width","undefined","render","display","map"],"mappings":"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","sourcesContent":["import React from 'react';\nimport explosion from '../assets/explode.gif'\n\nconst letterList = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \n                    \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \n                    \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \n                    \"S\", \"T\", \"U\", \"V\", \"W\", \n                    \"X\", \"Y\", \"Z\"]\n\n\nclass Game extends React.Component{\n   \n    constructor(){\n        super()\n        this.state = {\n            score: 0,\n            gameSpeed: 1,\n            speedIncrement: 0.01,\n            fallingSpeed: 0.1,\n            loop: undefined,\n            letters: [],\n            pressedLetters: [],\n            lettersGenerated: 0,\n            showMiss: \"none\"\n        }\n    }\n\n    componentDidMount = () => {\n        document.addEventListener(\"keydown\", this.handleKeyPress)\n        this.mainLoop()\n    }\n\n    mainLoop = () => {\n        let {score, gameSpeed, letters, \n            lettersGenerated, pressedLetters,\n            speedIncrement, fallingSpeed, gameOver} = this.state\n        \n        if(!gameOver) {\n            \n            //Increment speeds\n            if(lettersGenerated % 10 === 0){\n                speedIncrement += 0.0001\n            }\n    \n            if(lettersGenerated % 5 === 0){\n                fallingSpeed += 0.01\n            }\n    \n            gameSpeed += speedIncrement\n            if(gameSpeed > 2){\n                gameSpeed = 1\n            }\n    \n            let newLetters = letters;\n            //Check if pressed letters are in the screen and remove them\n            if(pressedLetters.length > 0){\n\n                newLetters = letters.filter(l => {\n                    return pressedLetters.indexOf(l.letter) === -1\n                })\n\n                letters.forEach(l => {\n                    if(pressedLetters.indexOf(l.letter) >= 0){\n                        this.showExplosion(l)\n                    }\n                })\n    \n                if(letters.length === newLetters.length){\n                    score--\n                    this.shakeScreen()\n                }else{\n                    score += letters.length - newLetters.length\n                }\n                pressedLetters = []\n            }\n    \n            //Add new letter to the screen\n            if(gameSpeed === 1){\n                lettersGenerated++\n    \n                let randomLetter = this.getRandomeLetter()\n                newLetters.push({\n                    letter: randomLetter,\n                    key: lettersGenerated,\n                    position: {\n                        x: this.getRandom(10, window.innerWidth-30),\n                        y: 20,\n                    }\n                })\n\n                if(score >= 10){\n                    const r = this.getRandom(1, 6)\n                    if(r === 2){\n                        lettersGenerated++\n                        randomLetter = this.getRandomeLetter()\n                        newLetters.push({\n                            letter: randomLetter,\n                            key: lettersGenerated,\n                            position: {\n                                x: this.getRandom(10, window.innerWidth-30),\n                                y: 20,\n                            }\n                        })\n                    }\n                }\n            }\n            \n            //Update letters position and check gameover\n            newLetters.forEach(letter => {\n                letter.position.y += fallingSpeed\n                if(letter.position.y >= (window.innerHeight-110)){\n                    gameOver = true\n                }\n            })\n    \n            const loop = requestAnimationFrame(this.mainLoop);\n            this.setState({\n                letters: newLetters,\n                score, \n                speedIncrement, \n                lettersGenerated, \n                gameSpeed, \n                loop,\n                fallingSpeed, \n                pressedLetters, \n                gameOver\n            })\n        }else{\n            this.stopGame()\n            this.props.history.push({pathname: '/gameOver', state:{score: this.state.score}})\n        }        \n    }\n\n    shakeScreen = () => {\n        this.setState({showMiss: \"inline\"})\n        setTimeout(() => {\n            this.setState({showMiss: \"none\"})        \n        }, 100);\n    }\n\n    handleKeyPress = (e) => {\n        let pressedLetters = this.state.pressedLetters\n        pressedLetters.push(e.key.toUpperCase())\n        this.setState({pressedLetters})\n    }\n\n    getRandomeLetter = () => {\n        const randomIndex = Math.floor((Math.random() * letterList.length));\n        return letterList[randomIndex]\n    }\n\n    getRandom = (min, max) => {\n        return Math.floor(Math.random() * (max - min) + min);\n    }\n\n    stopGame = () => {\n        cancelAnimationFrame(this.state.loop)\n    }\n\n    startGame = () => {\n        const loop = requestAnimationFrame(this.mainLoop);\n        this.setState({loop})\n    }\n\n    drawLetter = (letter) => {\n        return (\n            <span className=\"letter\" key={letter.key} style={\n                {\n                    position: \"absolute\", \n                    left: letter.position.x,\n                    top: letter.position.y\n                }\n            }>{letter.letter}</span>\n        )\n    }\n\n    showExplosion = (letter) => {\n        return <img src={explosion} \n        style={{\n            position: \"absolute\",\n            left: letter.position.x,\n            top: letter.position.y,\n            width: 30\n        }}/>\n    }\n\n    render(){\n        const letters = this.state.letters\n        const showMiss = this.state.showMiss\n        return(\n            <div className=\"game\">\n                <div class=\"miss\" style={{display: showMiss}} />\n                <p className=\"score\">Score {this.state.score}</p>\n                {letters && letters.map(letter => this.drawLetter(letter))}\n\n                <div className=\"gameOverSection\" style={{top: (window.innerHeight-100)}}>GAME OVER</div>\n            </div>\n        )\n    }\n}\n\nexport default Game"]},"metadata":{},"sourceType":"module"}